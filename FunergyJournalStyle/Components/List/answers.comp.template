#?delimiters [%, %], [%=, %]
<wr:LayoutParameter label="Width" name="width" type="enum" default="full" values="full|inset|card">
Defines the width of the component inside their container.
Allowed values are:
- full: use the full width available
- inset: add a margin
- card: add a margin and a shadow
</wr:LayoutParameter>
<wr:LayoutParameter label="Event Icon" name="event-icon" type="text" default="chevron-right">
Defines the icon to be shown when there is only one event.
</wr:LayoutParameter>
<wr:LayoutParameter label="Events Style" name="events-style" type="enum" default="none" values="none|button-bar|tabs">
Defines the style of the events.
</wr:LayoutParameter>
<wr:LayoutParameter label="Use Empty Message" name="use-empty-component-message" type="boolean" default="false">
Defines the usage of a message for empty components.
Allowed values are: true or false.
</wr:LayoutParameter>
<wr:LayoutParameter label="Empty Message Key" name="empty-component-message" type="string" default="emptyComponentMessage">
Defines the key of the message to use if the component is empty.
Default value: emptyComponentMessage
</wr:LayoutParameter>
[%
import org.apache.commons.lang.StringUtils
setHTMLOutput()
def listClass = (params["width"] != "full") ? params["width"] : ""
listClass = (listClass == "inset") ? "list-" + listClass : listClass

def dclassKeyName = getKeyAttributes(getById(component["dataBinding"]))[0]["name"]
def isCheckable = component["checkable"] == "true"

def attrs = component.selectNodes("layout:Attribute")
def nameAttr = attrs.find{it["type"] != 'blob'}
def imageAttr = !isCheckable ? attrs.find{it["type"] == 'blob' && (it["contentType"] == "" || it["contentType"].startsWith("image"))} : null

def hasValidation = component.selectSingleNode("VRules/*")

def eventTabs = params["events-style"] == "tabs"
def events = component.selectNodes("layout:Event")
def selectEvent = events.size() == 1 && !isCheckable ? events[0] : null
def hasEvents = events.size() > 0

def useEmptyComponentMessage = params["use-empty-component-message"] == "true"
def emptyComponentMessage = params["empty-component-message"]

def isButtonEvent(event) {
	def params = getParameterBindingInfos(getByIdOptional(event["event"])?.selectSingleNode("NavigationFlow"))
	return (params && params.size == 1 && params[0].getSourceParam() == "checkedKeys")
}
def hasOnRowEvent = events.find{!isButtonEvent(it)} != null
def hasButtonEvent = events.find{isButtonEvent(it)} != null
%]
<div class="<wr:StyleClass/> wr-comp-List">
	<div ng-if="view.data && view.data.length" class="list [%= listClass %]">
		<wr:Frame>
			<div
				class="item[% if (imageAttr) { %] item-avatar[% } %][% if (isCheckable) { %] item-checkbox[% } %][% if (selectEvent && StringUtils.isNotBlank(params["event-icon"])) { %] item-icon-right[% } %]"
				ng-repeat="current in view.data"
				[% if (selectEvent) { %]
					ng-click="[%= getEventThrowExpression(selectEvent, "{ position: \$index }") %]"
				[% } %]
			>
				[% if (isCheckable) { %]
					<label class="checkbox">
						<input type="checkbox" ng-model="view.checkedRows[current.[%= dclassKeyName %]]">
					</label>
				[% } %]
				[% if (imageAttr) { %]
					<wr:Value context="imageAttr" class="item-image"/>
				[% } %]
				[% if (nameAttr) { %]
					<h2><wr:Value context="nameAttr"/></h2>
				[% } %]
				<wr:Iterate var="attr" context="component" select="layout:Attribute">
					[% if (attr != nameAttr && attr != imageAttr) { %]
						<p><wr:Value/></p>
					[% } %]
				</wr:Iterate>
				
				[% if (selectEvent && StringUtils.isNotBlank(params["event-icon"])) { %]
					<span class="icon ion-[%= params["event-icon"] %]"></span>
				[% } else if (hasOnRowEvent && !selectEvent) { %]
					<div class="[%= (eventTabs) ? "item " : "" %][%= (params["events-style"] != "none") ? params["events-style"] : "item-buttons" %]">    
						<wr:Iterate var="event" context="component" select="layout:Event">
							[% if (eventTabs && !getLayout(event, LayoutType.EVENT).path.endsWith("Tab")) {
									throwGenerationException("Use Tab event template for ${event['name']} (${event['id']})")
							}
							if (!isButtonEvent(event)) { %]
								<wr:Event/>
							[% } %]
						</wr:Iterate>
					</div>
				[% } %]
				
			</div>
			
			[% if (hasValidation) { %]
				<ul class="wr-error-list item" ng-if="view.formState.errors.length">
					<li ng-repeat="error in view.formState.errors track by $index">
						{{ error }}
					</li>
				</ul>
			[% } %]
			
			[% if (hasButtonEvent) { %]
				<div class="[%= (eventTabs) ? "item " : "" %][%= (params["events-style"] != "none") ? params["events-style"] : "item-buttons" %]">    
					<wr:Iterate var="event" context="component" select="layout:Event">
						[% if (isButtonEvent(event)) { 
								if (eventTabs && !getLayout(event, LayoutType.EVENT).path.endsWith("Tab")) {
									throwGenerationException("Use Tab event template for ${event['name']} (${event['id']})")
								}
						%]
							<wr:Event/>
						[% } %]
					</wr:Iterate>
				</div>
			[% } %]
			
		</wr:Frame>
	</div>
	[% if (useEmptyComponentMessage) { %]
		<div ng-if="!view.data || !view.data.length" class="wr-empty-message list [%= listClass %]">
			<wr:Frame>
				<div class="item item-text-wrap">
					{{ '[%= emptyComponentMessage %]' | wrLocalize }}
				</div>
			</wr:Frame>
		</div>
	[% } %]
</div>